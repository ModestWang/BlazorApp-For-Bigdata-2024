@page "/chat/{index:int}"
@using System.Diagnostics
@using System.Text;
@rendermode InteractiveServer
@inject IConfiguration Configuration
@inject IJSRuntime JS

<div class="chat-container">
    <button @onclick="ToggleTheme" class="theme-toggle-button"
        style="background-color:@themeToggleButtonColor; border: 2px solid @themeToggleButtonBorderColor;">🌈</button>

    <div class="output-box" @ref="chatContainer">
        <ul>
            @foreach (var message in Messages)
            {
                <li class="message-item @(message.Role == "User" ? "user-message" : "other-message")">
                    @if (message.Role == "System")
                    {
                        <img src="egg.png" class="icon" />
                    }
                    <span class="message-content">@message.Content</span>
                    @if (message.Role == "User")
                    {
                        <img src="user.png" class="icon" />
                    }
                </li>
            }
        </ul>
    </div>

    <div class="input-box">
        <input @bind="question" placeholder="输入消息..." style="background-color:@inputBoxBackgroundColor;"
            @onkeydown="HandleKeyDown" />
        <button @onclick="OnUserSendMessageButtonClicked">发送(User)</button>
        @if (isLoading)
        {
            <div class="loading-spinner"></div>
        }
    </div>

</div>

<style>
    body {
        background-color: @backgroundColor;
        color: @textColor;
    }

    .chat-container {
        display: flex;
        flex-direction: column;
        height: 88vh;
    }

    .output-box {
        flex: 1;
        overflow-y: auto;
        padding: 5px;
        border: none;
    }

    .input-box {
        display: flex;
        height: 60px;
        padding: 0px;
        border-top: 1px solid #ccc;
    }

    .input-box input {
        flex: 1;
        padding: 6px;
        margin-top: 20px;
        margin-right: 8px;
        border-radius: 15px;
        border: 2px solid #ccc;
    }

    .input-box button {
        padding: 5px 30px;
        margin-top: 20px;
        border-radius: 15px;
        border: 1px solid #ccc;
        background-color: #007bff;
        color: white;
    }

    .input-box button:hover {
        background-color: #0056b3;
    }

    .message-item {
        display: flex;
        align-items: center;
        margin: 5px 0;
        padding: 0 10px;
        /* 调整左右边距 */
    }

    .user-message {
        justify-content: flex-end;
    }

    .other-message {
        justify-content: flex-start;
    }

    .message-content {
        background-color: @otherMessageBackgroundColor;
        padding: 10px;
        border-radius: 10px;
        margin: 0 10px;
    }

    .user-message .message-content {
        background-color: @userMessageBackgroundColor;
    }

    .icon {
        width: 30px;
        height: 30px;
    }

    .theme-toggle-button {
        margin-bottom: 10px;
        padding: 5px;
        cursor: pointer;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        font-size: 20px;
    }

    .loading-spinner {
        border: 4px solid rgba(0, 0, 0, 0.1);
        width: 36px;
        height: 36px;
        border-radius: 50%;
        border-left-color: #09f;
        animation: spin 1s linear infinite;
        margin-top: 20px;
        margin-left: 10px;
    }

    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }
</style>

@code {
    [Parameter]
    public int index { get; set; }

    private string backgroundColor = "#FFFFFF";
    private string textColor = "#000000";
    private string inputBoxBackgroundColor = "#FFFFFF";
    private string outputTextColor = "#000000";
    private string userMessageBackgroundColor = "#dcf8c6";
    private string otherMessageBackgroundColor = "#f1f0f0";
    private string themeToggleButtonColor = "#ffcccb";
    private string themeToggleButtonBorderColor = "#ff69b4";
    private bool isDarkTheme = false;
    private string question { get; set; } = string.Empty;
    private string answer { get; set; } = string.Empty;
    private bool isLoading = false;
    private List<ChatMessage> Messages = new List<ChatMessage>();

    private string chat_id = string.Empty;
    private ElementReference chatContainer;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        backgroundColor = GetRandomColor();
        inputBoxBackgroundColor = LightenColor(backgroundColor, 0.1);
        themeToggleButtonColor = LightenColor(backgroundColor, 0.2);
        themeToggleButtonBorderColor = backgroundColor;
        outputTextColor = textColor;

        // 根据当前时间生成唯一的 chat_id
        chat_id = DateTime.Now.ToString("yyyyMMddHHmmssfff") + ".json";
        // question = chat_id;

        System.IO.File.WriteAllText("output/question.txt", string.Empty);
        System.IO.File.WriteAllText("output/answer.txt", string.Empty);

        if (ChatManager.ChatManagerInstance.Chats.Count > index)
        {
            var welcomeMessage = ChatManager.ChatManagerInstance.Chats[index].WellcomeMessage;
            if (welcomeMessage != null)
            {
                Messages.Add(welcomeMessage);
            }
        }
    }

    // 调用 Python 脚本
    static async Task<string> CallPythonScript(string filename, string question)
    {
        ProcessStartInfo start = new ProcessStartInfo();
        start.FileName = "python"; // 或者指定python.exe的完整路径
        start.Arguments = $"y_test.py \"{filename}\" \"{question}\"";
        start.UseShellExecute = false;
        start.RedirectStandardOutput = true;
        start.RedirectStandardError = true;
        start.CreateNoWindow = true;

        Process? process = Process.Start(start);
        if (process == null)
        {
            throw new InvalidOperationException("Failed to start process.");
        }

        using (process)
        {
            await process.WaitForExitAsync();

            // 读取answer.txt中的内容并返回
            string answerFilePath = "output/answer.txt";
            if (File.Exists(answerFilePath))
            {
                using (StreamReader sr = new StreamReader(answerFilePath, Encoding.UTF8))
                {
                    string answerContent = string.Empty;
                    while (!sr.EndOfStream)
                    {
                        answerContent = await sr.ReadLineAsync() ?? string.Empty;
                    }
                    return answerContent;
                }
            }
            else
            {
                Console.WriteLine("answer.txt 文件不存在。");
                return string.Empty;
            }
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(question))
        {
            await OnUserSendMessageButtonClicked();
        }
    }

    private async Task OnUserSendMessageButtonClicked()
    {
        if (!string.IsNullOrWhiteSpace(question))
        {
            Messages.Add(new ChatMessage { Content = question, Role = "User" });
            string tempQuestion = question;
            question = string.Empty; // 清空输入框
            isLoading = true; // 设置加载标志位
            await JS.InvokeVoidAsync("scrollToBottom", chatContainer); // 立即滚动到底部
#pragma warning disable CS4014
            await JS.InvokeVoidAsync("scrollToBottom", chatContainer);
#pragma warning restore CS4014
            answer = await CallPythonScript(chat_id, tempQuestion);
            isLoading = false; // 取消加载标志位
            await TypeMessageAsync(answer);
            await JS.InvokeVoidAsync("scrollToBottom", chatContainer); // 再次滚动到底部
        }
    }

    private async Task TypeMessageAsync(string message)
    {
        await JS.InvokeVoidAsync("scrollToBottom", chatContainer); // 立即滚动到底部
        var SystemMessage = new ChatMessage { Content = string.Empty, Role = "System" };
        Messages.Add(SystemMessage);

        foreach (char c in message)
        {
            SystemMessage.Content += c;
            StateHasChanged();
            await Task.Delay(50); // 调整延迟以控制逐字输出速度
            await JS.InvokeVoidAsync("scrollToBottom", chatContainer);
        }

    }

    private string GetRandomColor()
    {
        var random = new Random();
        var colors = new List<string>
{
"#FFB6C1", // 浅粉红
"#E6E6FA", // 薰衣草
"#FFFACD", // 柠檬薄纱
"#E0FFFF", // 浅青色
"#F0E68C", // 卡其色
"#FAFAD2", // 浅金菊黄
"#D8BFD8", // 蓟色
"#FFE4E1", // 薄雾玫瑰
"#F5DEB3", // 小麦色
"#FFF0F5", // 脸红的淡紫色
"#F5F5DC", // 米色
"#F0FFF0", // 蜜瓜色
"#F0FFFF", // 天蓝色
"#E6E6FA", // 薰衣草
"#FFF5EE", // 海贝色
"#FFE4B5", // 秘鲁色
}; // 更多的柔和颜色
        int index = random.Next(colors.Count);
        return colors[index];
    }

    private string LightenColor(string color, double factor)
    {
        var colorValue = System.Drawing.ColorTranslator.FromHtml(color);
        int r = (int)(colorValue.R + (255 - colorValue.R) * factor);
        int g = (int)(colorValue.G + (255 - colorValue.G) * factor);
        int b = (int)(colorValue.B + (255 - colorValue.B) * factor);
        return $"#{r:X2}{g:X2}{b:X2}";
    }

    private void ToggleTheme()
    {
        isDarkTheme = !isDarkTheme;
        if (isDarkTheme)
        {
            backgroundColor = "#333333"; // 暗色背景
            textColor = "#FFFFFF"; // 亮色文字
            inputBoxBackgroundColor = "#555555"; // 固定暗色输入框背景
            themeToggleButtonColor = "#777777"; // 固定暗色按钮背景
            themeToggleButtonBorderColor = "#555555"; // 固定暗色按钮边框
            outputTextColor = "#FFFFFF"; // 亮色输出框文字
            userMessageBackgroundColor = "#4a4a4a"; // 暗色用户消息背景
            otherMessageBackgroundColor = "#3a3a3a"; // 暗色其他消息背景
        }
        else
        {
            backgroundColor = GetRandomColor(); // 亮色背景
            textColor = "#000000"; // 暗色文字
            inputBoxBackgroundColor = LightenColor(backgroundColor, 0.1); // 比背景颜色浅一点
            themeToggleButtonColor = LightenColor(backgroundColor, 0.2); // 比背景颜色更浅
            themeToggleButtonBorderColor = backgroundColor; // 与背景颜色一致
            outputTextColor = "#000000"; // 暗色输出框文字
            userMessageBackgroundColor = "#dcf8c6"; // 亮色用户消息背景
            otherMessageBackgroundColor = "#f1f0f0"; // 亮色其他消息背景
        }
    }
}

<script>
    function scrollToBottom(element) {
        element.scrollTop = element.scrollHeight;
    }
</script>
